{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "P0xLtRswK9AV"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score # métrica de evaluación\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn import metrics\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "5trwC-5EKCbk",
        "outputId": "04ad6290-ac97-4407-f381-64799bc6e065"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Neo Reference ID</th>\n",
              "      <th>Name</th>\n",
              "      <th>Absolute Magnitude</th>\n",
              "      <th>Est Dia in KM(min)</th>\n",
              "      <th>Est Dia in KM(max)</th>\n",
              "      <th>Est Dia in M(min)</th>\n",
              "      <th>Est Dia in M(max)</th>\n",
              "      <th>Est Dia in Miles(min)</th>\n",
              "      <th>Est Dia in Miles(max)</th>\n",
              "      <th>Est Dia in Feet(min)</th>\n",
              "      <th>...</th>\n",
              "      <th>Asc Node Longitude</th>\n",
              "      <th>Orbital Period</th>\n",
              "      <th>Perihelion Distance</th>\n",
              "      <th>Perihelion Arg</th>\n",
              "      <th>Aphelion Dist</th>\n",
              "      <th>Perihelion Time</th>\n",
              "      <th>Mean Anomaly</th>\n",
              "      <th>Mean Motion</th>\n",
              "      <th>Equinox</th>\n",
              "      <th>Hazardous</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3703080</td>\n",
              "      <td>3703080</td>\n",
              "      <td>21.6</td>\n",
              "      <td>0.127220</td>\n",
              "      <td>0.284472</td>\n",
              "      <td>127.219879</td>\n",
              "      <td>284.472297</td>\n",
              "      <td>0.079051</td>\n",
              "      <td>0.176763</td>\n",
              "      <td>417.388066</td>\n",
              "      <td>...</td>\n",
              "      <td>314.373913</td>\n",
              "      <td>609.599786</td>\n",
              "      <td>0.808259</td>\n",
              "      <td>57.257470</td>\n",
              "      <td>2.005764</td>\n",
              "      <td>2.458162e+06</td>\n",
              "      <td>264.837533</td>\n",
              "      <td>0.590551</td>\n",
              "      <td>J2000</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3723955</td>\n",
              "      <td>3723955</td>\n",
              "      <td>21.3</td>\n",
              "      <td>0.146068</td>\n",
              "      <td>0.326618</td>\n",
              "      <td>146.067964</td>\n",
              "      <td>326.617897</td>\n",
              "      <td>0.090762</td>\n",
              "      <td>0.202951</td>\n",
              "      <td>479.225620</td>\n",
              "      <td>...</td>\n",
              "      <td>136.717242</td>\n",
              "      <td>425.869294</td>\n",
              "      <td>0.718200</td>\n",
              "      <td>313.091975</td>\n",
              "      <td>1.497352</td>\n",
              "      <td>2.457795e+06</td>\n",
              "      <td>173.741112</td>\n",
              "      <td>0.845330</td>\n",
              "      <td>J2000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2446862</td>\n",
              "      <td>2446862</td>\n",
              "      <td>20.3</td>\n",
              "      <td>0.231502</td>\n",
              "      <td>0.517654</td>\n",
              "      <td>231.502122</td>\n",
              "      <td>517.654482</td>\n",
              "      <td>0.143849</td>\n",
              "      <td>0.321655</td>\n",
              "      <td>759.521423</td>\n",
              "      <td>...</td>\n",
              "      <td>259.475979</td>\n",
              "      <td>643.580228</td>\n",
              "      <td>0.950791</td>\n",
              "      <td>248.415038</td>\n",
              "      <td>1.966857</td>\n",
              "      <td>2.458120e+06</td>\n",
              "      <td>292.893654</td>\n",
              "      <td>0.559371</td>\n",
              "      <td>J2000</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3092506</td>\n",
              "      <td>3092506</td>\n",
              "      <td>27.4</td>\n",
              "      <td>0.008801</td>\n",
              "      <td>0.019681</td>\n",
              "      <td>8.801465</td>\n",
              "      <td>19.680675</td>\n",
              "      <td>0.005469</td>\n",
              "      <td>0.012229</td>\n",
              "      <td>28.876199</td>\n",
              "      <td>...</td>\n",
              "      <td>57.173266</td>\n",
              "      <td>514.082140</td>\n",
              "      <td>0.983902</td>\n",
              "      <td>18.707701</td>\n",
              "      <td>1.527904</td>\n",
              "      <td>2.457902e+06</td>\n",
              "      <td>68.741007</td>\n",
              "      <td>0.700277</td>\n",
              "      <td>J2000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3514799</td>\n",
              "      <td>3514799</td>\n",
              "      <td>21.6</td>\n",
              "      <td>0.127220</td>\n",
              "      <td>0.284472</td>\n",
              "      <td>127.219879</td>\n",
              "      <td>284.472297</td>\n",
              "      <td>0.079051</td>\n",
              "      <td>0.176763</td>\n",
              "      <td>417.388066</td>\n",
              "      <td>...</td>\n",
              "      <td>84.629307</td>\n",
              "      <td>495.597821</td>\n",
              "      <td>0.967687</td>\n",
              "      <td>158.263596</td>\n",
              "      <td>1.483543</td>\n",
              "      <td>2.457814e+06</td>\n",
              "      <td>135.142133</td>\n",
              "      <td>0.726395</td>\n",
              "      <td>J2000</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 40 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   Neo Reference ID     Name  Absolute Magnitude  Est Dia in KM(min)  \\\n",
              "0           3703080  3703080                21.6            0.127220   \n",
              "1           3723955  3723955                21.3            0.146068   \n",
              "2           2446862  2446862                20.3            0.231502   \n",
              "3           3092506  3092506                27.4            0.008801   \n",
              "4           3514799  3514799                21.6            0.127220   \n",
              "\n",
              "   Est Dia in KM(max)  Est Dia in M(min)  Est Dia in M(max)  \\\n",
              "0            0.284472         127.219879         284.472297   \n",
              "1            0.326618         146.067964         326.617897   \n",
              "2            0.517654         231.502122         517.654482   \n",
              "3            0.019681           8.801465          19.680675   \n",
              "4            0.284472         127.219879         284.472297   \n",
              "\n",
              "   Est Dia in Miles(min)  Est Dia in Miles(max)  Est Dia in Feet(min)  ...  \\\n",
              "0               0.079051               0.176763            417.388066  ...   \n",
              "1               0.090762               0.202951            479.225620  ...   \n",
              "2               0.143849               0.321655            759.521423  ...   \n",
              "3               0.005469               0.012229             28.876199  ...   \n",
              "4               0.079051               0.176763            417.388066  ...   \n",
              "\n",
              "   Asc Node Longitude Orbital Period  Perihelion Distance  Perihelion Arg  \\\n",
              "0          314.373913     609.599786             0.808259       57.257470   \n",
              "1          136.717242     425.869294             0.718200      313.091975   \n",
              "2          259.475979     643.580228             0.950791      248.415038   \n",
              "3           57.173266     514.082140             0.983902       18.707701   \n",
              "4           84.629307     495.597821             0.967687      158.263596   \n",
              "\n",
              "   Aphelion Dist  Perihelion Time  Mean Anomaly  Mean Motion  Equinox  \\\n",
              "0       2.005764     2.458162e+06    264.837533     0.590551    J2000   \n",
              "1       1.497352     2.457795e+06    173.741112     0.845330    J2000   \n",
              "2       1.966857     2.458120e+06    292.893654     0.559371    J2000   \n",
              "3       1.527904     2.457902e+06     68.741007     0.700277    J2000   \n",
              "4       1.483543     2.457814e+06    135.142133     0.726395    J2000   \n",
              "\n",
              "   Hazardous  \n",
              "0       True  \n",
              "1      False  \n",
              "2       True  \n",
              "3      False  \n",
              "4       True  \n",
              "\n",
              "[5 rows x 40 columns]"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nasa = pd.read_csv('https://raw.githubusercontent.com/pokengineer/DataScience/main/datasets/asteroids_nasa.csv')\n",
        "df_nasa.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RmZa5mOdPpku"
      },
      "source": [
        "Salteo el análisis ya que es un dataset que conocemos\n",
        "# Preprocesamiento de datos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [],
      "source": [
        "X = df_nasa.drop(columns=\"Hazardous\")\n",
        "y = df_nasa[\"Hazardous\"]\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "columnas = [ 'Absolute Magnitude', 'Est Dia in KM(min)',\n",
        "       'Est Dia in KM(max)', 'Est Dia in M(min)', 'Est Dia in M(max)',\n",
        "       'Est Dia in Miles(min)', 'Est Dia in Miles(max)',\n",
        "       'Est Dia in Feet(min)', 'Est Dia in Feet(max)', 'Relative Velocity km per sec',\n",
        "       'Relative Velocity km per hr', 'Miles per hour',\n",
        "       'Miss Dist.(Astronomical)', 'Miss Dist.(lunar)',\n",
        "       'Miss Dist.(kilometers)', 'Miss Dist.(miles)',\n",
        "       'Orbit ID', 'Orbit Uncertainity','Minimum Orbit Intersection', 'Jupiter Tisserand Invariant',\n",
        "       'Epoch Osculation', 'Eccentricity', 'Semi Major Axis', 'Inclination',\n",
        "       'Asc Node Longitude', 'Orbital Period', 'Perihelion Distance',\n",
        "       'Perihelion Arg', 'Aphelion Dist', 'Perihelion Time', 'Mean Anomaly','Mean Motion']\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-9 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-9 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-9 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-9 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-9 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-9 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-9 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-9 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-9 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-9 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-9 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;selector&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;selector&#x27;, &#x27;passthrough&#x27;,\n",
              "                                                  [&#x27;Absolute Magnitude&#x27;,\n",
              "                                                   &#x27;Est Dia in KM(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in KM(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in M(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in M(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in Miles(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in Miles(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in Feet(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in Feet(max)&#x27;,\n",
              "                                                   &#x27;Relative Velocity km per &#x27;\n",
              "                                                   &#x27;sec&#x27;,\n",
              "                                                   &#x27;Relative Velocity km per &#x27;\n",
              "                                                   &#x27;hr&#x27;,\n",
              "                                                   &#x27;Miles per hour&#x27;,\n",
              "                                                   &#x27;Miss Dist.(Astronom...\n",
              "                                                   &#x27;Miss Dist.(kilometers)&#x27;,\n",
              "                                                   &#x27;Miss Dist.(miles)&#x27;,\n",
              "                                                   &#x27;Orbit ID&#x27;,\n",
              "                                                   &#x27;Orbit Uncertainity&#x27;,\n",
              "                                                   &#x27;Minimum Orbit Intersection&#x27;,\n",
              "                                                   &#x27;Jupiter Tisserand &#x27;\n",
              "                                                   &#x27;Invariant&#x27;,\n",
              "                                                   &#x27;Epoch Osculation&#x27;,\n",
              "                                                   &#x27;Eccentricity&#x27;,\n",
              "                                                   &#x27;Semi Major Axis&#x27;,\n",
              "                                                   &#x27;Inclination&#x27;,\n",
              "                                                   &#x27;Asc Node Longitude&#x27;,\n",
              "                                                   &#x27;Orbital Period&#x27;,\n",
              "                                                   &#x27;Perihelion Distance&#x27;,\n",
              "                                                   &#x27;Perihelion Arg&#x27;,\n",
              "                                                   &#x27;Aphelion Dist&#x27;,\n",
              "                                                   &#x27;Perihelion Time&#x27;, ...])])),\n",
              "                (&#x27;classifier&#x27;,\n",
              "                 DecisionTreeClassifier(max_depth=2, random_state=1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-46\" type=\"checkbox\" ><label for=\"sk-estimator-id-46\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;selector&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;selector&#x27;, &#x27;passthrough&#x27;,\n",
              "                                                  [&#x27;Absolute Magnitude&#x27;,\n",
              "                                                   &#x27;Est Dia in KM(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in KM(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in M(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in M(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in Miles(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in Miles(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in Feet(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in Feet(max)&#x27;,\n",
              "                                                   &#x27;Relative Velocity km per &#x27;\n",
              "                                                   &#x27;sec&#x27;,\n",
              "                                                   &#x27;Relative Velocity km per &#x27;\n",
              "                                                   &#x27;hr&#x27;,\n",
              "                                                   &#x27;Miles per hour&#x27;,\n",
              "                                                   &#x27;Miss Dist.(Astronom...\n",
              "                                                   &#x27;Miss Dist.(kilometers)&#x27;,\n",
              "                                                   &#x27;Miss Dist.(miles)&#x27;,\n",
              "                                                   &#x27;Orbit ID&#x27;,\n",
              "                                                   &#x27;Orbit Uncertainity&#x27;,\n",
              "                                                   &#x27;Minimum Orbit Intersection&#x27;,\n",
              "                                                   &#x27;Jupiter Tisserand &#x27;\n",
              "                                                   &#x27;Invariant&#x27;,\n",
              "                                                   &#x27;Epoch Osculation&#x27;,\n",
              "                                                   &#x27;Eccentricity&#x27;,\n",
              "                                                   &#x27;Semi Major Axis&#x27;,\n",
              "                                                   &#x27;Inclination&#x27;,\n",
              "                                                   &#x27;Asc Node Longitude&#x27;,\n",
              "                                                   &#x27;Orbital Period&#x27;,\n",
              "                                                   &#x27;Perihelion Distance&#x27;,\n",
              "                                                   &#x27;Perihelion Arg&#x27;,\n",
              "                                                   &#x27;Aphelion Dist&#x27;,\n",
              "                                                   &#x27;Perihelion Time&#x27;, ...])])),\n",
              "                (&#x27;classifier&#x27;,\n",
              "                 DecisionTreeClassifier(max_depth=2, random_state=1))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-47\" type=\"checkbox\" ><label for=\"sk-estimator-id-47\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;selector: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for selector: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;selector&#x27;, &#x27;passthrough&#x27;,\n",
              "                                 [&#x27;Absolute Magnitude&#x27;, &#x27;Est Dia in KM(min)&#x27;,\n",
              "                                  &#x27;Est Dia in KM(max)&#x27;, &#x27;Est Dia in M(min)&#x27;,\n",
              "                                  &#x27;Est Dia in M(max)&#x27;, &#x27;Est Dia in Miles(min)&#x27;,\n",
              "                                  &#x27;Est Dia in Miles(max)&#x27;,\n",
              "                                  &#x27;Est Dia in Feet(min)&#x27;,\n",
              "                                  &#x27;Est Dia in Feet(max)&#x27;,\n",
              "                                  &#x27;Relative Velocity km per sec&#x27;,\n",
              "                                  &#x27;Relative Velocity km per hr&#x27;,\n",
              "                                  &#x27;Miles per hour&#x27;, &#x27;Miss Dist.(Astronomical)&#x27;,\n",
              "                                  &#x27;Miss Dist.(lunar)&#x27;, &#x27;Miss Dist.(kilometers)&#x27;,\n",
              "                                  &#x27;Miss Dist.(miles)&#x27;, &#x27;Orbit ID&#x27;,\n",
              "                                  &#x27;Orbit Uncertainity&#x27;,\n",
              "                                  &#x27;Minimum Orbit Intersection&#x27;,\n",
              "                                  &#x27;Jupiter Tisserand Invariant&#x27;,\n",
              "                                  &#x27;Epoch Osculation&#x27;, &#x27;Eccentricity&#x27;,\n",
              "                                  &#x27;Semi Major Axis&#x27;, &#x27;Inclination&#x27;,\n",
              "                                  &#x27;Asc Node Longitude&#x27;, &#x27;Orbital Period&#x27;,\n",
              "                                  &#x27;Perihelion Distance&#x27;, &#x27;Perihelion Arg&#x27;,\n",
              "                                  &#x27;Aphelion Dist&#x27;, &#x27;Perihelion Time&#x27;, ...])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-48\" type=\"checkbox\" ><label for=\"sk-estimator-id-48\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">selector</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Absolute Magnitude&#x27;, &#x27;Est Dia in KM(min)&#x27;, &#x27;Est Dia in KM(max)&#x27;, &#x27;Est Dia in M(min)&#x27;, &#x27;Est Dia in M(max)&#x27;, &#x27;Est Dia in Miles(min)&#x27;, &#x27;Est Dia in Miles(max)&#x27;, &#x27;Est Dia in Feet(min)&#x27;, &#x27;Est Dia in Feet(max)&#x27;, &#x27;Relative Velocity km per sec&#x27;, &#x27;Relative Velocity km per hr&#x27;, &#x27;Miles per hour&#x27;, &#x27;Miss Dist.(Astronomical)&#x27;, &#x27;Miss Dist.(lunar)&#x27;, &#x27;Miss Dist.(kilometers)&#x27;, &#x27;Miss Dist.(miles)&#x27;, &#x27;Orbit ID&#x27;, &#x27;Orbit Uncertainity&#x27;, &#x27;Minimum Orbit Intersection&#x27;, &#x27;Jupiter Tisserand Invariant&#x27;, &#x27;Epoch Osculation&#x27;, &#x27;Eccentricity&#x27;, &#x27;Semi Major Axis&#x27;, &#x27;Inclination&#x27;, &#x27;Asc Node Longitude&#x27;, &#x27;Orbital Period&#x27;, &#x27;Perihelion Distance&#x27;, &#x27;Perihelion Arg&#x27;, &#x27;Aphelion Dist&#x27;, &#x27;Perihelion Time&#x27;, &#x27;Mean Anomaly&#x27;, &#x27;Mean Motion&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-49\" type=\"checkbox\" ><label for=\"sk-estimator-id-49\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">passthrough</label><div class=\"sk-toggleable__content fitted\"><pre>passthrough</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-50\" type=\"checkbox\" ><label for=\"sk-estimator-id-50\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=2, random_state=1)</pre></div> </div></div></div></div></div></div>"
            ],
            "text/plain": [
              "Pipeline(steps=[('selector',\n",
              "                 ColumnTransformer(transformers=[('selector', 'passthrough',\n",
              "                                                  ['Absolute Magnitude',\n",
              "                                                   'Est Dia in KM(min)',\n",
              "                                                   'Est Dia in KM(max)',\n",
              "                                                   'Est Dia in M(min)',\n",
              "                                                   'Est Dia in M(max)',\n",
              "                                                   'Est Dia in Miles(min)',\n",
              "                                                   'Est Dia in Miles(max)',\n",
              "                                                   'Est Dia in Feet(min)',\n",
              "                                                   'Est Dia in Feet(max)',\n",
              "                                                   'Relative Velocity km per '\n",
              "                                                   'sec',\n",
              "                                                   'Relative Velocity km per '\n",
              "                                                   'hr',\n",
              "                                                   'Miles per hour',\n",
              "                                                   'Miss Dist.(Astronom...\n",
              "                                                   'Miss Dist.(kilometers)',\n",
              "                                                   'Miss Dist.(miles)',\n",
              "                                                   'Orbit ID',\n",
              "                                                   'Orbit Uncertainity',\n",
              "                                                   'Minimum Orbit Intersection',\n",
              "                                                   'Jupiter Tisserand '\n",
              "                                                   'Invariant',\n",
              "                                                   'Epoch Osculation',\n",
              "                                                   'Eccentricity',\n",
              "                                                   'Semi Major Axis',\n",
              "                                                   'Inclination',\n",
              "                                                   'Asc Node Longitude',\n",
              "                                                   'Orbital Period',\n",
              "                                                   'Perihelion Distance',\n",
              "                                                   'Perihelion Arg',\n",
              "                                                   'Aphelion Dist',\n",
              "                                                   'Perihelion Time', ...])])),\n",
              "                ('classifier',\n",
              "                 DecisionTreeClassifier(max_depth=2, random_state=1))])"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pl = Pipeline([\n",
        "    (\"selector\", ColumnTransformer([(\"selector\", \"passthrough\", columnas)], remainder=\"drop\")),\n",
        "    ('classifier', DecisionTreeClassifier(max_depth=2, random_state=1))\n",
        "])\n",
        "pl.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Exactitud (accuracy) del modelo: 99.36 %\n",
            "----------------------------------------------------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.99      1.00      1.00      1194\n",
            "        True       1.00      0.96      0.98       213\n",
            "\n",
            "    accuracy                           0.99      1407\n",
            "   macro avg       0.99      0.98      0.99      1407\n",
            "weighted avg       0.99      0.99      0.99      1407\n",
            "\n"
          ]
        }
      ],
      "source": [
        "y_pred_tc = pl.predict(X_test)\n",
        "\n",
        "#Exactitud del modelo\n",
        "print('Exactitud (accuracy) del modelo: {:.2f} %'.format(accuracy_score(y_test, y_pred_tc)*100))\n",
        "print(\"-\"*100)\n",
        "\n",
        "# Reporte del clasificador\n",
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test,y_pred_tc))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "im1OPXM9dvth"
      },
      "source": [
        "# Comparamos por curva ROC los modelos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {},
      "outputs": [],
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "pl_knn = Pipeline([\n",
        "    (\"selector\", ColumnTransformer([(\"selector\", \"passthrough\", columnas)], remainder=\"drop\")),\n",
        "    ('scaler', StandardScaler(with_mean=True, with_std=True)),\n",
        "    ('classifier', KNeighborsClassifier(n_neighbors=11))\n",
        "])\n",
        "pl_knn.fit(X_train, y_train)\n",
        "y_pred_knn = pl_knn.predict(X_test)\n",
        "\n",
        "pl_NBg = Pipeline([\n",
        "    (\"selector\", ColumnTransformer([(\"selector\", \"passthrough\", columnas)], remainder=\"drop\")),\n",
        "    ('scaler', StandardScaler(with_mean=True, with_std=True)),\n",
        "    ('classifier', GaussianNB())\n",
        "])\n",
        "pl_NBg.fit(X_train, y_train)\n",
        "y_pred_gauss = pl_NBg.predict(X_test)\n",
        "\n",
        "pl_NGm = Pipeline([\n",
        "    (\"selector\", ColumnTransformer([(\"selector\", \"passthrough\", columnas)], remainder=\"drop\")),\n",
        "    ('classifier', MultinomialNB())\n",
        "])\n",
        "pl_NGm.fit(X_train, y_train)\n",
        "y_pred_nb = pl_NGm.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "4sLwZVvvdtOu",
        "outputId": "dcf5ace4-0127-4608-c774-a1bea95853cf"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 2000x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "def graficarCurvaRoc( y_pred, model ):\n",
        "  fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\n",
        "  auc = metrics.roc_auc_score(y_test, y_pred)\n",
        "  # Graficamos\n",
        "  plt.plot(fpr,tpr,label= model +\" AUC=\"+str(round(auc,4))) #,label= \"AUC=\"+str(auc))\n",
        "  plt.legend(loc=4, fontsize=12)\n",
        "  return auc\n",
        "\n",
        "# Inicializamos los labels del gráfico\n",
        "plt.figure(figsize=(20, 10))\n",
        "plt.xlabel('% Not Hazardous', fontsize=14)\n",
        "plt.ylabel('% Hazardous', fontsize=14)\n",
        "\n",
        "# Graficamos la recta del azar\n",
        "it = [i/100 for i in range(100)]\n",
        "plt.plot(it,it,label=\"AZAR AUC=0.5\",color=\"black\")\n",
        "\n",
        "modelos = {'bayesMulti':y_pred_nb, 'bayesGauss':y_pred_gauss,\n",
        "             'arbol':y_pred_tc,'knn':y_pred_knn}\n",
        "for pred in modelos:\n",
        "    auc = graficarCurvaRoc( modelos[pred] , pred )\n",
        "\n",
        "# Agregamos el titulo y configuro el tamaño de letra\n",
        "plt.title(\"Curva ROC\", fontsize=14)\n",
        "plt.tick_params(labelsize=12);\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6rGxzQrwf9Qd"
      },
      "source": [
        "# Mejoramos el modelo de Arbol de Decision con GridSearch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 10 folds for each of 90 candidates, totalling 900 fits\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-18 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-18 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-18 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-18 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-18 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-18 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-18 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-18 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-18 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-18 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-18 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-18 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-18 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-18 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-18 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-18 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-18 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-18\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10,\n",
              "             estimator=Pipeline(steps=[(&#x27;selector&#x27;,\n",
              "                                        ColumnTransformer(transformers=[(&#x27;selector&#x27;,\n",
              "                                                                         &#x27;passthrough&#x27;,\n",
              "                                                                         [&#x27;Absolute &#x27;\n",
              "                                                                          &#x27;Magnitude&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;KM(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;KM(max)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;M(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;M(max)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Miles(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Miles(max)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Feet(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Feet(max)&#x27;,\n",
              "                                                                          &#x27;Relative &#x27;\n",
              "                                                                          &#x27;V...\n",
              "                                                                          &#x27;Aphelion &#x27;\n",
              "                                                                          &#x27;Dist&#x27;,\n",
              "                                                                          &#x27;Perihelion &#x27;\n",
              "                                                                          &#x27;Time&#x27;, ...])])),\n",
              "                                       (&#x27;classifier&#x27;,\n",
              "                                        DecisionTreeClassifier(max_depth=2,\n",
              "                                                               random_state=1))]),\n",
              "             n_jobs=-1,\n",
              "             param_grid=[{&#x27;classifier&#x27;: [DecisionTreeClassifier()],\n",
              "                          &#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;,\n",
              "                                                    &#x27;log_loss&#x27;],\n",
              "                          &#x27;classifier__max_depth&#x27;: [2, 5, 7, 10, None],\n",
              "                          &#x27;classifier__min_samples_leaf&#x27;: [2, 10, 50, 75, 100,\n",
              "                                                           200]}],\n",
              "             scoring=&#x27;roc_auc&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-104\" type=\"checkbox\" ><label for=\"sk-estimator-id-104\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=10,\n",
              "             estimator=Pipeline(steps=[(&#x27;selector&#x27;,\n",
              "                                        ColumnTransformer(transformers=[(&#x27;selector&#x27;,\n",
              "                                                                         &#x27;passthrough&#x27;,\n",
              "                                                                         [&#x27;Absolute &#x27;\n",
              "                                                                          &#x27;Magnitude&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;KM(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;KM(max)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;M(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;M(max)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Miles(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Miles(max)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Feet(min)&#x27;,\n",
              "                                                                          &#x27;Est &#x27;\n",
              "                                                                          &#x27;Dia &#x27;\n",
              "                                                                          &#x27;in &#x27;\n",
              "                                                                          &#x27;Feet(max)&#x27;,\n",
              "                                                                          &#x27;Relative &#x27;\n",
              "                                                                          &#x27;V...\n",
              "                                                                          &#x27;Aphelion &#x27;\n",
              "                                                                          &#x27;Dist&#x27;,\n",
              "                                                                          &#x27;Perihelion &#x27;\n",
              "                                                                          &#x27;Time&#x27;, ...])])),\n",
              "                                       (&#x27;classifier&#x27;,\n",
              "                                        DecisionTreeClassifier(max_depth=2,\n",
              "                                                               random_state=1))]),\n",
              "             n_jobs=-1,\n",
              "             param_grid=[{&#x27;classifier&#x27;: [DecisionTreeClassifier()],\n",
              "                          &#x27;classifier__criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;,\n",
              "                                                    &#x27;log_loss&#x27;],\n",
              "                          &#x27;classifier__max_depth&#x27;: [2, 5, 7, 10, None],\n",
              "                          &#x27;classifier__min_samples_leaf&#x27;: [2, 10, 50, 75, 100,\n",
              "                                                           200]}],\n",
              "             scoring=&#x27;roc_auc&#x27;, verbose=1)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-105\" type=\"checkbox\" ><label for=\"sk-estimator-id-105\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: Pipeline</label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;selector&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;selector&#x27;, &#x27;passthrough&#x27;,\n",
              "                                                  [&#x27;Absolute Magnitude&#x27;,\n",
              "                                                   &#x27;Est Dia in KM(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in KM(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in M(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in M(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in Miles(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in Miles(max)&#x27;,\n",
              "                                                   &#x27;Est Dia in Feet(min)&#x27;,\n",
              "                                                   &#x27;Est Dia in Feet(max)&#x27;,\n",
              "                                                   &#x27;Relative Velocity km per &#x27;\n",
              "                                                   &#x27;sec&#x27;,\n",
              "                                                   &#x27;Relative Velocity km per &#x27;\n",
              "                                                   &#x27;hr&#x27;,\n",
              "                                                   &#x27;Miles per hour&#x27;,\n",
              "                                                   &#x27;Miss Dist.(Astronom...\n",
              "                                                   &#x27;Miss Dist.(miles)&#x27;,\n",
              "                                                   &#x27;Orbit ID&#x27;,\n",
              "                                                   &#x27;Orbit Uncertainity&#x27;,\n",
              "                                                   &#x27;Minimum Orbit Intersection&#x27;,\n",
              "                                                   &#x27;Jupiter Tisserand &#x27;\n",
              "                                                   &#x27;Invariant&#x27;,\n",
              "                                                   &#x27;Epoch Osculation&#x27;,\n",
              "                                                   &#x27;Eccentricity&#x27;,\n",
              "                                                   &#x27;Semi Major Axis&#x27;,\n",
              "                                                   &#x27;Inclination&#x27;,\n",
              "                                                   &#x27;Asc Node Longitude&#x27;,\n",
              "                                                   &#x27;Orbital Period&#x27;,\n",
              "                                                   &#x27;Perihelion Distance&#x27;,\n",
              "                                                   &#x27;Perihelion Arg&#x27;,\n",
              "                                                   &#x27;Aphelion Dist&#x27;,\n",
              "                                                   &#x27;Perihelion Time&#x27;, ...])])),\n",
              "                (&#x27;classifier&#x27;,\n",
              "                 DecisionTreeClassifier(max_depth=5, min_samples_leaf=50))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-106\" type=\"checkbox\" ><label for=\"sk-estimator-id-106\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;selector: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for selector: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;selector&#x27;, &#x27;passthrough&#x27;,\n",
              "                                 [&#x27;Absolute Magnitude&#x27;, &#x27;Est Dia in KM(min)&#x27;,\n",
              "                                  &#x27;Est Dia in KM(max)&#x27;, &#x27;Est Dia in M(min)&#x27;,\n",
              "                                  &#x27;Est Dia in M(max)&#x27;, &#x27;Est Dia in Miles(min)&#x27;,\n",
              "                                  &#x27;Est Dia in Miles(max)&#x27;,\n",
              "                                  &#x27;Est Dia in Feet(min)&#x27;,\n",
              "                                  &#x27;Est Dia in Feet(max)&#x27;,\n",
              "                                  &#x27;Relative Velocity km per sec&#x27;,\n",
              "                                  &#x27;Relative Velocity km per hr&#x27;,\n",
              "                                  &#x27;Miles per hour&#x27;, &#x27;Miss Dist.(Astronomical)&#x27;,\n",
              "                                  &#x27;Miss Dist.(lunar)&#x27;, &#x27;Miss Dist.(kilometers)&#x27;,\n",
              "                                  &#x27;Miss Dist.(miles)&#x27;, &#x27;Orbit ID&#x27;,\n",
              "                                  &#x27;Orbit Uncertainity&#x27;,\n",
              "                                  &#x27;Minimum Orbit Intersection&#x27;,\n",
              "                                  &#x27;Jupiter Tisserand Invariant&#x27;,\n",
              "                                  &#x27;Epoch Osculation&#x27;, &#x27;Eccentricity&#x27;,\n",
              "                                  &#x27;Semi Major Axis&#x27;, &#x27;Inclination&#x27;,\n",
              "                                  &#x27;Asc Node Longitude&#x27;, &#x27;Orbital Period&#x27;,\n",
              "                                  &#x27;Perihelion Distance&#x27;, &#x27;Perihelion Arg&#x27;,\n",
              "                                  &#x27;Aphelion Dist&#x27;, &#x27;Perihelion Time&#x27;, ...])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-107\" type=\"checkbox\" ><label for=\"sk-estimator-id-107\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">selector</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Absolute Magnitude&#x27;, &#x27;Est Dia in KM(min)&#x27;, &#x27;Est Dia in KM(max)&#x27;, &#x27;Est Dia in M(min)&#x27;, &#x27;Est Dia in M(max)&#x27;, &#x27;Est Dia in Miles(min)&#x27;, &#x27;Est Dia in Miles(max)&#x27;, &#x27;Est Dia in Feet(min)&#x27;, &#x27;Est Dia in Feet(max)&#x27;, &#x27;Relative Velocity km per sec&#x27;, &#x27;Relative Velocity km per hr&#x27;, &#x27;Miles per hour&#x27;, &#x27;Miss Dist.(Astronomical)&#x27;, &#x27;Miss Dist.(lunar)&#x27;, &#x27;Miss Dist.(kilometers)&#x27;, &#x27;Miss Dist.(miles)&#x27;, &#x27;Orbit ID&#x27;, &#x27;Orbit Uncertainity&#x27;, &#x27;Minimum Orbit Intersection&#x27;, &#x27;Jupiter Tisserand Invariant&#x27;, &#x27;Epoch Osculation&#x27;, &#x27;Eccentricity&#x27;, &#x27;Semi Major Axis&#x27;, &#x27;Inclination&#x27;, &#x27;Asc Node Longitude&#x27;, &#x27;Orbital Period&#x27;, &#x27;Perihelion Distance&#x27;, &#x27;Perihelion Arg&#x27;, &#x27;Aphelion Dist&#x27;, &#x27;Perihelion Time&#x27;, &#x27;Mean Anomaly&#x27;, &#x27;Mean Motion&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-108\" type=\"checkbox\" ><label for=\"sk-estimator-id-108\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">passthrough</label><div class=\"sk-toggleable__content fitted\"><pre>passthrough</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-109\" type=\"checkbox\" ><label for=\"sk-estimator-id-109\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=5, min_samples_leaf=50)</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"
            ],
            "text/plain": [
              "GridSearchCV(cv=10,\n",
              "             estimator=Pipeline(steps=[('selector',\n",
              "                                        ColumnTransformer(transformers=[('selector',\n",
              "                                                                         'passthrough',\n",
              "                                                                         ['Absolute '\n",
              "                                                                          'Magnitude',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'KM(min)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'KM(max)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'M(min)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'M(max)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'Miles(min)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'Miles(max)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'Feet(min)',\n",
              "                                                                          'Est '\n",
              "                                                                          'Dia '\n",
              "                                                                          'in '\n",
              "                                                                          'Feet(max)',\n",
              "                                                                          'Relative '\n",
              "                                                                          'V...\n",
              "                                                                          'Aphelion '\n",
              "                                                                          'Dist',\n",
              "                                                                          'Perihelion '\n",
              "                                                                          'Time', ...])])),\n",
              "                                       ('classifier',\n",
              "                                        DecisionTreeClassifier(max_depth=2,\n",
              "                                                               random_state=1))]),\n",
              "             n_jobs=-1,\n",
              "             param_grid=[{'classifier': [DecisionTreeClassifier()],\n",
              "                          'classifier__criterion': ['gini', 'entropy',\n",
              "                                                    'log_loss'],\n",
              "                          'classifier__max_depth': [2, 5, 7, 10, None],\n",
              "                          'classifier__min_samples_leaf': [2, 10, 50, 75, 100,\n",
              "                                                           200]}],\n",
              "             scoring='roc_auc', verbose=1)"
            ]
          },
          "execution_count": 80,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = [\n",
        "    {\n",
        "        \"classifier__max_depth\": [2, 5, 7, 10, None],\n",
        "        \"classifier__min_samples_leaf\": [2, 10, 50, 75, 100, 200],\n",
        "        \"classifier__criterion\": ['gini', 'entropy', 'log_loss'],\n",
        "        \"classifier\": [DecisionTreeClassifier()]\n",
        "    }]\n",
        "\n",
        "grid_search = GridSearchCV(pl, param_grid, cv=10, verbose=1,n_jobs=-1, scoring='roc_auc')\n",
        "grid_search.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'classifier': DecisionTreeClassifier(), 'classifier__criterion': 'gini', 'classifier__max_depth': 5, 'classifier__min_samples_leaf': 50}\n"
          ]
        }
      ],
      "source": [
        "y_pred_gsCV = grid_search.best_estimator_.predict(X_test)\n",
        "print(grid_search.best_params_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9808018968079836"
            ]
          },
          "execution_count": 84,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "graficarCurvaRoc(y_pred_gsCV, \"GridSearch Tree\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fVOQIHqXmAj8"
      },
      "source": [
        "# Ejercicio\n",
        "- Usar el step de \"selector\" del pipeline para remover las columnas redundantes\n",
        "- Crear un pipeline para el clasificador randomforest\n",
        "- Usar GridSearchCV para encontrar el valor optimo de k en KNN"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
