{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "P0xLtRswK9AV"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import MultinomialNB # naive bayes multinomial para clasificación\n",
        "from sklearn.metrics import accuracy_score # métrica de evaluación\n",
        "from sklearn.metrics import classification_report"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MIrmam4QK985"
      },
      "source": [
        "# Análisis Exploratorio"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "5trwC-5EKCbk",
        "outputId": "5bd3f3db-0557-4503-b05d-f79309add602"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Neo Reference ID</th>\n",
              "      <th>Name</th>\n",
              "      <th>Absolute Magnitude</th>\n",
              "      <th>Est Dia in KM(min)</th>\n",
              "      <th>Est Dia in KM(max)</th>\n",
              "      <th>Est Dia in M(min)</th>\n",
              "      <th>Est Dia in M(max)</th>\n",
              "      <th>Est Dia in Miles(min)</th>\n",
              "      <th>Est Dia in Miles(max)</th>\n",
              "      <th>Est Dia in Feet(min)</th>\n",
              "      <th>...</th>\n",
              "      <th>Asc Node Longitude</th>\n",
              "      <th>Orbital Period</th>\n",
              "      <th>Perihelion Distance</th>\n",
              "      <th>Perihelion Arg</th>\n",
              "      <th>Aphelion Dist</th>\n",
              "      <th>Perihelion Time</th>\n",
              "      <th>Mean Anomaly</th>\n",
              "      <th>Mean Motion</th>\n",
              "      <th>Equinox</th>\n",
              "      <th>Hazardous</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3703080</td>\n",
              "      <td>3703080</td>\n",
              "      <td>21.6</td>\n",
              "      <td>0.127220</td>\n",
              "      <td>0.284472</td>\n",
              "      <td>127.219879</td>\n",
              "      <td>284.472297</td>\n",
              "      <td>0.079051</td>\n",
              "      <td>0.176763</td>\n",
              "      <td>417.388066</td>\n",
              "      <td>...</td>\n",
              "      <td>314.373913</td>\n",
              "      <td>609.599786</td>\n",
              "      <td>0.808259</td>\n",
              "      <td>57.257470</td>\n",
              "      <td>2.005764</td>\n",
              "      <td>2.458162e+06</td>\n",
              "      <td>264.837533</td>\n",
              "      <td>0.590551</td>\n",
              "      <td>J2000</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3723955</td>\n",
              "      <td>3723955</td>\n",
              "      <td>21.3</td>\n",
              "      <td>0.146068</td>\n",
              "      <td>0.326618</td>\n",
              "      <td>146.067964</td>\n",
              "      <td>326.617897</td>\n",
              "      <td>0.090762</td>\n",
              "      <td>0.202951</td>\n",
              "      <td>479.225620</td>\n",
              "      <td>...</td>\n",
              "      <td>136.717242</td>\n",
              "      <td>425.869294</td>\n",
              "      <td>0.718200</td>\n",
              "      <td>313.091975</td>\n",
              "      <td>1.497352</td>\n",
              "      <td>2.457795e+06</td>\n",
              "      <td>173.741112</td>\n",
              "      <td>0.845330</td>\n",
              "      <td>J2000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2446862</td>\n",
              "      <td>2446862</td>\n",
              "      <td>20.3</td>\n",
              "      <td>0.231502</td>\n",
              "      <td>0.517654</td>\n",
              "      <td>231.502122</td>\n",
              "      <td>517.654482</td>\n",
              "      <td>0.143849</td>\n",
              "      <td>0.321655</td>\n",
              "      <td>759.521423</td>\n",
              "      <td>...</td>\n",
              "      <td>259.475979</td>\n",
              "      <td>643.580228</td>\n",
              "      <td>0.950791</td>\n",
              "      <td>248.415038</td>\n",
              "      <td>1.966857</td>\n",
              "      <td>2.458120e+06</td>\n",
              "      <td>292.893654</td>\n",
              "      <td>0.559371</td>\n",
              "      <td>J2000</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3092506</td>\n",
              "      <td>3092506</td>\n",
              "      <td>27.4</td>\n",
              "      <td>0.008801</td>\n",
              "      <td>0.019681</td>\n",
              "      <td>8.801465</td>\n",
              "      <td>19.680675</td>\n",
              "      <td>0.005469</td>\n",
              "      <td>0.012229</td>\n",
              "      <td>28.876199</td>\n",
              "      <td>...</td>\n",
              "      <td>57.173266</td>\n",
              "      <td>514.082140</td>\n",
              "      <td>0.983902</td>\n",
              "      <td>18.707701</td>\n",
              "      <td>1.527904</td>\n",
              "      <td>2.457902e+06</td>\n",
              "      <td>68.741007</td>\n",
              "      <td>0.700277</td>\n",
              "      <td>J2000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3514799</td>\n",
              "      <td>3514799</td>\n",
              "      <td>21.6</td>\n",
              "      <td>0.127220</td>\n",
              "      <td>0.284472</td>\n",
              "      <td>127.219879</td>\n",
              "      <td>284.472297</td>\n",
              "      <td>0.079051</td>\n",
              "      <td>0.176763</td>\n",
              "      <td>417.388066</td>\n",
              "      <td>...</td>\n",
              "      <td>84.629307</td>\n",
              "      <td>495.597821</td>\n",
              "      <td>0.967687</td>\n",
              "      <td>158.263596</td>\n",
              "      <td>1.483543</td>\n",
              "      <td>2.457814e+06</td>\n",
              "      <td>135.142133</td>\n",
              "      <td>0.726395</td>\n",
              "      <td>J2000</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 40 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   Neo Reference ID     Name  Absolute Magnitude  Est Dia in KM(min)  \\\n",
              "0           3703080  3703080                21.6            0.127220   \n",
              "1           3723955  3723955                21.3            0.146068   \n",
              "2           2446862  2446862                20.3            0.231502   \n",
              "3           3092506  3092506                27.4            0.008801   \n",
              "4           3514799  3514799                21.6            0.127220   \n",
              "\n",
              "   Est Dia in KM(max)  Est Dia in M(min)  Est Dia in M(max)  \\\n",
              "0            0.284472         127.219879         284.472297   \n",
              "1            0.326618         146.067964         326.617897   \n",
              "2            0.517654         231.502122         517.654482   \n",
              "3            0.019681           8.801465          19.680675   \n",
              "4            0.284472         127.219879         284.472297   \n",
              "\n",
              "   Est Dia in Miles(min)  Est Dia in Miles(max)  Est Dia in Feet(min)  ...  \\\n",
              "0               0.079051               0.176763            417.388066  ...   \n",
              "1               0.090762               0.202951            479.225620  ...   \n",
              "2               0.143849               0.321655            759.521423  ...   \n",
              "3               0.005469               0.012229             28.876199  ...   \n",
              "4               0.079051               0.176763            417.388066  ...   \n",
              "\n",
              "   Asc Node Longitude Orbital Period  Perihelion Distance  Perihelion Arg  \\\n",
              "0          314.373913     609.599786             0.808259       57.257470   \n",
              "1          136.717242     425.869294             0.718200      313.091975   \n",
              "2          259.475979     643.580228             0.950791      248.415038   \n",
              "3           57.173266     514.082140             0.983902       18.707701   \n",
              "4           84.629307     495.597821             0.967687      158.263596   \n",
              "\n",
              "   Aphelion Dist  Perihelion Time  Mean Anomaly  Mean Motion  Equinox  \\\n",
              "0       2.005764     2.458162e+06    264.837533     0.590551    J2000   \n",
              "1       1.497352     2.457795e+06    173.741112     0.845330    J2000   \n",
              "2       1.966857     2.458120e+06    292.893654     0.559371    J2000   \n",
              "3       1.527904     2.457902e+06     68.741007     0.700277    J2000   \n",
              "4       1.483543     2.457814e+06    135.142133     0.726395    J2000   \n",
              "\n",
              "   Hazardous  \n",
              "0       True  \n",
              "1      False  \n",
              "2       True  \n",
              "3      False  \n",
              "4       True  \n",
              "\n",
              "[5 rows x 40 columns]"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nasa = pd.read_csv('https://raw.githubusercontent.com/pokengineer/DataScience/main/datasets/asteroids_nasa.csv')\n",
        "df_nasa.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F2MaDIuQK5-k",
        "outputId": "c3e2b6f5-db16-4eda-d024-82d4a7d70fe7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Neo Reference ID                  int64\n",
              "Name                              int64\n",
              "Absolute Magnitude              float64\n",
              "Est Dia in KM(min)              float64\n",
              "Est Dia in KM(max)              float64\n",
              "Est Dia in M(min)               float64\n",
              "Est Dia in M(max)               float64\n",
              "Est Dia in Miles(min)           float64\n",
              "Est Dia in Miles(max)           float64\n",
              "Est Dia in Feet(min)            float64\n",
              "Est Dia in Feet(max)            float64\n",
              "Close Approach Date              object\n",
              "Epoch Date Close Approach         int64\n",
              "Relative Velocity km per sec    float64\n",
              "Relative Velocity km per hr     float64\n",
              "Miles per hour                  float64\n",
              "Miss Dist.(Astronomical)        float64\n",
              "Miss Dist.(lunar)               float64\n",
              "Miss Dist.(kilometers)          float64\n",
              "Miss Dist.(miles)               float64\n",
              "Orbiting Body                    object\n",
              "Orbit ID                          int64\n",
              "Orbit Determination Date         object\n",
              "Orbit Uncertainity                int64\n",
              "Minimum Orbit Intersection      float64\n",
              "Jupiter Tisserand Invariant     float64\n",
              "Epoch Osculation                float64\n",
              "Eccentricity                    float64\n",
              "Semi Major Axis                 float64\n",
              "Inclination                     float64\n",
              "Asc Node Longitude              float64\n",
              "Orbital Period                  float64\n",
              "Perihelion Distance             float64\n",
              "Perihelion Arg                  float64\n",
              "Aphelion Dist                   float64\n",
              "Perihelion Time                 float64\n",
              "Mean Anomaly                    float64\n",
              "Mean Motion                     float64\n",
              "Equinox                          object\n",
              "Hazardous                          bool\n",
              "dtype: object"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Verificamos los tipos de datos\n",
        "df_nasa.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Z_MYIBPLJxL",
        "outputId": "9ac9fe04-697d-4bc1-b725-dc78b948b206"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Tamaño del dataframe : (4687, 40)\n"
          ]
        }
      ],
      "source": [
        "print(\"Tamaño del dataframe : {}\".format(df_nasa.shape))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fOt2OYnyMu8z",
        "outputId": "f214d071-5373-4a5a-b396-e0acd61d962c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Neo Reference ID                0\n",
              "Name                            0\n",
              "Absolute Magnitude              0\n",
              "Est Dia in KM(min)              0\n",
              "Est Dia in KM(max)              0\n",
              "Est Dia in M(min)               0\n",
              "Est Dia in M(max)               0\n",
              "Est Dia in Miles(min)           0\n",
              "Est Dia in Miles(max)           0\n",
              "Est Dia in Feet(min)            0\n",
              "Est Dia in Feet(max)            0\n",
              "Close Approach Date             0\n",
              "Epoch Date Close Approach       0\n",
              "Relative Velocity km per sec    0\n",
              "Relative Velocity km per hr     0\n",
              "Miles per hour                  0\n",
              "Miss Dist.(Astronomical)        0\n",
              "Miss Dist.(lunar)               0\n",
              "Miss Dist.(kilometers)          0\n",
              "Miss Dist.(miles)               0\n",
              "Orbiting Body                   0\n",
              "Orbit ID                        0\n",
              "Orbit Determination Date        0\n",
              "Orbit Uncertainity              0\n",
              "Minimum Orbit Intersection      0\n",
              "Jupiter Tisserand Invariant     0\n",
              "Epoch Osculation                0\n",
              "Eccentricity                    0\n",
              "Semi Major Axis                 0\n",
              "Inclination                     0\n",
              "Asc Node Longitude              0\n",
              "Orbital Period                  0\n",
              "Perihelion Distance             0\n",
              "Perihelion Arg                  0\n",
              "Aphelion Dist                   0\n",
              "Perihelion Time                 0\n",
              "Mean Anomaly                    0\n",
              "Mean Motion                     0\n",
              "Equinox                         0\n",
              "Hazardous                       0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Verificamos si hay valores nulos para imputar\n",
        "df_nasa.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "lOki9Ak_LgG7",
        "outputId": "bcb77f80-f95a-4011-eeaa-a0b43d47ab9c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hazardous\n",
            "False    3932\n",
            "True      755\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Axes: xlabel='Hazardous', ylabel='count'>"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Analisis de la distribución de la variable target \"Hazardous\"\n",
        "print( df_nasa.Hazardous.value_counts() )\n",
        "sns.countplot(x='Hazardous', data=df_nasa, hue='Hazardous', legend=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qcRRQADzNi6h"
      },
      "source": [
        "# Correlación de Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 799
        },
        "id": "tqPyTOWONRNN",
        "outputId": "305c3e85-583a-4b87-c911-a256a51c1bc7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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uv6hfhHz/50v+/3OEDvXtm72m/1JZJ8RRmET2v/QJjl69Gitivrwww9D+5KIiIiIiIiIiEIdg7AICK2jaO9Lnz69VmAZO2cSERERERERUfgWQUd3hRgmJBEQBuiH1Y5XDMbHQUREREREREQU7oblWwG7OWLwfXDnSPlqHauhagstjGF1PavXDQvB4dixY0P7MoiIiIiIiIgCxV0jw1gQhmof44Zhdz206GHXQ+zOaCXsuogh7GalSpWS69evS6JEiSw558GDB/Vz7tmzx+nz7733XqgMqW/QoIGcOfPfkPYBAwZIwYLWDhIlIiIiIiIiIoqUrZFVq1bVnQpfvHihYdFnn32mgdG3334rISlmzJiSOnVqy9YvUqSIFChQQGbOnCnvvPOO3XMXL16UzZs3y2+//SYhLU6cOHqQPfw+IpwNa2sREREREREReSqCFmqF79bIWLFiaQCVIUMGqV27tlSqVEk2bNhgt6vh8OHDtVoMgQ3CpMWLF7tc786dO9KoUSNJly6dxI0bV/Llyyfz58+3q0LbunWrjBs3zlaNhiDK3Br54MEDPdeaNWvs1v71118lQYIE8uTJE/3577//lvr162sLYNKkSaVWrVq6listW7aUhQsX2t5vbiNMkyaNhoL+/v7SvXt3vf548eJJiRIl9NrcmTx5smTNmlXDvJw5c8qcOXPsnsdnatu2raRKlUpix44tefPmlZUrVwZoYcSfBw4cKEeOHLHdGzzWokUL+eCDDwKEOylTppQZM2aIJ27duiVFixaVOnXq6Gc07ve6deukUKFCer8rVqwofn5+et9z584tCRMmlE8++STA/XK8d7j+ZcuWSfbs2fXzValSRb8bs+XLl0vhwoX1+SxZsujnfPnype15XAvuI3bNxH0fOnSoy3PienBP8LuQMWNGmTp1qu05fP9YC99zuXLl9Hzz5s3z6B4RERERERERUSSaEXb8+HHZtWuXBjoGhGCzZ8+WH3/8UU6cOCFdu3aVJk2aaJjlDNoqUX21atUqXa9Nmzby6aefyr59+/R5BGAlS5aU1q1bayskDoRwZghgEPz8/PPPdo8j0EBYh4ANQRACF4Qh27dvl507d0r8+PE1zHr+/LnTa2vcuLGGQOYgD4PqZ82apQFdtGjRpGPHjrJ7925ZsGCBHD16VOrVq6drnj171umaCOe6dOkiX375pX5e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YdasWdF3331X87wuFLgeHpyblDHTBIRMtnRY/p577lm1zybKgeZaQggRBpVGCiG8gfuDMjR2LjU5Ky+UztGtypb9JcvafJf9EdZuw/gpkYRbbrnFuM/22muvqKjgWOMYrbbaajXH6IUXXjBilY9jRCkqAhJlixtuuKERI1999dVo8eLFJvfpqquuiooOzq/u3bvXfHbywvizTZs2JgTanl9CNFdsJlslXMLygf+XHEU6T1q3rmgZaK4lhBDuSAgTQgiRq8jTHAiZQzZx4kSTBXP99debMk/r3KEk5uabbzbhyTQaKIObhDLaO+64w5w/uMFwo5FLtvzyy0dl4KuvvjJCHvl1thMm3w/5PDjehKgm5Cy+/PLLNWOzEEIIIRqHhDAhhBC5hs3nFcYfEso6Q5VpInBtvPHG0QUXXFDx30877TTTXfPee++NigwdKVmolxnErn322cecn7jxKNmlvG3RokUmXwtRsohQRtUYcJSI8oLL8qKLLjIdX4UQQgjReCSECSGEyE3kqVbHxTJBiSjZYJ06dar472So7bvvvqb00Idj69FHH41ef/316KCDDjLuv4ULF5rvZIUVVnB6b96jV69eplkBC/X6ysSKCmWcjz32mBEm//SnP5mSVHK3JkyYEJ111lnGjVNEONbrrLNO1LFjx3oz/nC3iXCMGDGi3n/nHHKBDYmhQ4ea5ghbbbVVzWZF8hoUQgghxJJICBNCCNFsM8jKCC6qN954wxyDSixYsMB0oaNszwXK/Hbddddo/vz5xuX3r3/9y3wHgwcPNn8fPXq00/sjsowbNy6aPHmycf8dcMABRhTDxVIWKInEfbf22mubxg4IYoT9k2vXoUMH0+G0iBx33HHGdYkYhrDNcV9llVWq/bFaHAiRSWhi8Oabb0ZLL7101L59++i5555zev+kuJxsfsDU3jWDTAghhGjOqGukEEIIUSC+/fbbJbrLJWERzX/jCoIXohQi5KqrrlrzOi6ufv36Ob8/78Pj888/N00REGY6d+5sxDaEGVc3TB4gON5zzz3m95g6darpAAgffPBBod0211xzjSndxFlI+SOuod133z066qijTLmnOkbmQ6WunZ999ll0+OGHm3PKlWnTpjm/hxBCCNESkSNMCCFEriiMv2GXx9FHH10T0J4GF9INN9zgfHwQv2bMmGGcTUlX3ltvvWXC4EO4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27dvrfIzIZri8EwLzi5iM+/53nvv1RKzK03lfYnZQgghRHNEQpgQQghRQOgYuf7665s/k1x99dXRa6+9Fl1++eVO749La6211qq4SH/77bdNyZULuFGOOeYYIyqRRfb8889Hv/jFL8xrq6++euHDvL/55hvjWqP8ccaMGdHuu+8eHXXUUUbQUymaaAwhxOZkOSTP6wMhVwghhBBLIiFMCCGEKCBrrrmmCc/faqutar3+3HPPmaD8d955x1uZZJKPPvrIvObqJmndunX04osvRuuuu2606qqrRo8++qgpD3v55ZdNyDc/uywgONx8882mw+b3339vfq8VVlih2h9LCCGEEEJkYOks/5MQQgghwoIgteKKKy7xOrlCixYtcn5/W56V5osvvoiWW2455/dfeeWVTWdKK+rNnTvXCGGLFy+O/vOf/0RlIlmCpnIzUaQMr3nz5kVXXXWVEZhho402igYNGhR16NDB+b2FEEKI5oqEMCGEEKKAUBb597//PRo4cGCt16dMmRKtt956md/3pJNOMn8i7AwfPjz6yU9+UvNviDxPPfVUtMUWW0SubL/99tGDDz5oxK/evXtHgwcPjh555BHz2k477RQVnWRp5BNPPBH17NnTlKXuuuuuje7uKVoeXDs2w4vnITO8JkyYEPXp0yfaeuuto2233da8NnPmTCPEkdG37777Or2/EEII0VyRECaEEEIUEAQrRLAPP/zQlBLCww8/HF166aVO+WCzZs0yf7I4nzNnTrTsssvW/BvPN9988+iUU05x/vyIRl9//bV5PmzYMNMxj6wtFudnnnlmVGQGDBhghAQy1I488kgTnN+mTZtqfyxRAt58881otdVWq3kekiFDhkRDhw6NRowYUev1s88+2/ybhDAhhBCiMsoIE0IIIQrKddddF5133nnRwoULzd/J2zrnnHNMN0ZX6IZ4xRVXmFJLURscXwSSd+zYsd5gfBxjQlQL3JyUX+IeTfLqq68aQbtsJchCCCFEXsgRJoQQQhSU/v37mweusOWXX95rQPtNN90U+eazzz5r9H9bZAEOoVGdIYUPEKWmTZsWffDBB9EPP/xQ69/OOussp/feYYcdounTpy8hhFHKu9122zm9txBCCNGckSNMCCGEKDCIYARiwy9/+UuvJXrPPvtsdNddd0Xz58+Pvv32W2e3kw2Vb0xIv0LnRXPnhhtuMEI212y7du1qXRs8pwOsC6NHjzZi2v777x917ty5JiNs/Pjx0bnnnhutscYaNf8tnWaFEEII8b9ICBNCCCEKyJdffmm6v40dO7bGSdKqVSvjVqJLXDLkPgtkYPFe3bt3jx544IFol112if71r39F77//ftSrV69MjrHHHnus0f9t165dm/z+QpSJddZZx+TNnXbaaUHev7FNGyQ8CyGEELWRECaEEEIUkGOOOSZ66KGHTOj8b37zm5qSp+OPPz7q1q2byQ9zYbPNNjM/47jjjot++tOfRs8//3z0i1/8wry2+uqrG0eJECI7lP/Onj3bqcurEEIIIfyj/t9CCCFEAZkwYUJ04403Rj169DALah677babKbe6++67nd//9ddfj3bfffeabpE40HCOnHjiidGYMWM8/AaRyS/q27dv1KVLl2jBggXmtb/85S9G0BOiudO7d2/jthRCCCFEsVBYvhBCCFFA6PjWtm3bJV7/+c9/7qUb3Morrxx9/vnn5vmaa64ZzZ07N9p0002jxYsXe3l/hLxDDjkkOvjgg00W0jfffGNe//TTT6Pzzz8/uv/++51/hhBFhhD74cOHm9wurq1lllmm1r/j7nRhxIgR9f67axi/EEII0VxRaaQQQghRQHbaaado1VVXNRlhyy23nHntq6++ig477LDo448/NmWTLhx00EHR1ltvHZ100knRyJEjTe7YXnvtFT344IPRlltumSksP0nHjh2Nu4wcMlt6SYnYrFmzjMvtvffec3p/IYoOpcZ1gfvyjTfecL7Gknz33XfRm2++GS299NJR+/btncP4hRBCiOaKhDAhhBCigODQIsgeJ9Xmm29uXkNMQhSbOnVqtPHGGzu9P2La119/bTrLEcb/xz/+MZoxY0a0wQYbRGeeeaZxjLlAmP9LL70UrbvuurWEMBb/v/rVr8zPFkL45bPPPosOP/xw0/ACR6YQQgghlkRCmBBCCFFQKFG87bbboldeecX8faONNjKlhssvv3xUdBC9yBrbeeedawlhONwuvPBCI5IJIfwzZ86caI899ojeeuutan8UIYQQopAoI0wIIYQoKLiq+vXr59Ut0lgI53eBzz148ODoz3/+sykDW7hwYfTkk09Gp5xyislNEqI5YkuNW7dubZ7Xx6hRo4J8BnL4eAghhBCiMhLChBBCiIIyb948k9318ssv1zjCBg4cGP3yl7/M9H4rrbSSEaXqA6M4/81///vfyIXTTz/dlFySdYazbfvtt49+/OMfGyFs0KBBTu8tRFEhA4+sLvu8Lhq6DhvDlVdeucS1++6775rOrOTwCSGEEKIyKo0UQgghCghdF/v06WMC7bfddlvzGt3nnnnmmeiOO+6I9t133ya/52OPPdbo/7Zr166RD7799tvotddei7744guTDbbCCiuY0P8ylHcKUaYw/qWWWipabbXVoh133DEaOnSoKUkWQgghxJJICBNCCCEKCF3fyAMbMWJErdfPPvvs6NZbb41ef/31qGwQ/H/NNdeYYH51jRRCCCGEENVAQpgQQghR0HywF154IVp//fVrvf7qq6+aLpKUG7oyffr06PrrrzedHMePHx+tueaapqwKp8lvf/vbzGLXOeecEz344IPRsssuGw0ZMiTae++9o5tuuikaNmxY1KpVK1Peedpppzl/fiGKyJFHHtmo/478vCzss88+Df43Sy+9dNSuXbuoW7duJjhfCCGEEP/HUonnQgghhCgIO+ywgxGq0jzxxBPRdttt56X0snv37qZE8bnnnjMCFhCyff7552d+37POOiu67rrronXXXdd0revdu3d09NFHR5dddpkJB+c1iWCiOXPzzTdH06ZNixYvXhx98skndT6ysuKKKzb44LpGND/ggAPMNSmEEEKI/0OOMCGEEKKAjB492ixg999//6hz5841GWE4t84999xojTXWqPlv99xzzya/f8eOHaMTTzwxOvTQQ02W0PPPPx+tt956JuCboO2spYu8x+WXX24+09y5c6PNNtssOvzww6Mbb7zRS0C4EEXnuOOOi26//fZonXXWiY444oiob9++0SqrrFKVz3LfffdFAwYMiObPn1+Vny+EEEIUEQlhQgghRAEh+LoxZO3wSOnlSy+9ZJxbSSGMMklC7b/++usMnzoy5ZBvvvmmKbMEnClPP/10tOmmm2Z6PyHKCA7Lv/71r6b8ccaMGdHuu+8eHXXUUdEuu+ySqyCMK41STT6LEEIIIf4XlUYKIYQQBeSHH35o1COLCAbkB9HNsVLpJYJYVvg8iGHJrCI6RQrRkvjxj38cHXjggSYrD8F54403Ns4shGc6qObFSiutJBFMCCGESLF0+gUhhBBCNH/69esXDR482DhWcKgsXLgwevLJJ6NTTjklGj58eOb3xWhOKSRCAOAsO/bYY6PWrVvX+u+0OBctyd3JNca1kVW4FkIIIYQ/5AgTQgghCsRuu+1mAustF154oSlvsnz00UemdNGV008/PTrooIOinXbayThUtt9+++j3v/99dMwxx0SDBg3K/L6HHXZY9POf/7wmtJt8JPLM0mHeQjT30khywujauOGGG0Zz5syJrr76apPVJYekEEIIUV2UESaEEEIUiFatWkXvvvuuEZPgZz/7WTR79uyacsX333/fCEu+nCXffvutKZFEDENgY5H+1VdfmWwvIUTToQTyjjvuiNZaay2Tz3XwwQdHbdq0qfbHEkIIIcT/R0KYEEIIUbAyKjo2WiEsGWQfQghLu1iuueaa6I9//GPmrpFCtHS4htdee23TmbW+YHyVBwshhBDVQRlhQgghRAsCseucc84xId6E2g8ZMiTae++9o5tuuikaNmyYcaSdeOKJ1f6YQpSWQw89NNfOkEIIIYRoGhLChBBCiALBAjq9iPa5qD7rrLOi66+/Ptp5552jGTNmRL17946OOOKIaObMmdGoUaPM3xHDhBDZuPnmm6v9EYQQQghRDxLChBBCiALRUNdFHF0ujB8/Pho7dmy05557RnPnzo0222yz6Pvvvzfll3KxCCGEEEKI5o4ywoQQQogCgTurMVDKmAXKId98881ozTXXNH8nFP/pp5+ONt1000zvJ4QQQgghRJmQI0wIIYQoEFkFrsZCyD5imGXppZc2nSKFEEIIIYRoCUgIE0IIIVoQDZVeWtTRTgghhBBCNEckhAkhhBAtiMMOO6zW3/v27Vu1zyKEEEIIIUTeKCNMCCGEEEIIIYQQQrQIlqr2BxBCCCGEEEIIIYQQIg8khAkhhBBCCCGEEEKIFoGEMCGEEEIIIYQQQgjRIpAQJoQQQgghhBBCCCFaBBLChBBCCCGEEEIIIUSLQEKYEEIIIYQQQgghhGgRSAgTQgghhBBCCCGEEC0CCWFCCCGEEEIIIYQQImoJ/D8uTBzj6ahNRgAAAABJRU5ErkJggg==",
            "text/plain": [
              "<Figure size 1400x700 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(14,7))\n",
        "sns.heatmap(df_nasa.drop(['Close Approach Date','Orbiting Body','Orbit Determination Date','Equinox'],axis=1).corr(), vmax=.7, cmap ='Blues', fmt=\".2f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8gH15EmiORMU",
        "outputId": "7d614a5d-7687-4ff5-8be7-b630598be2fb"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hazardous</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Orbit Uncertainity</th>\n",
              "      <td>32.872134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Absolute Magnitude</th>\n",
              "      <td>32.552193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Minimum Orbit Intersection</th>\n",
              "      <td>28.894902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>26.902814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Neo Reference ID</th>\n",
              "      <td>26.902814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Orbit ID</th>\n",
              "      <td>24.736904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Perihelion Distance</th>\n",
              "      <td>20.702693</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Relative Velocity km per sec</th>\n",
              "      <td>19.197018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miles per hour</th>\n",
              "      <td>19.197018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Relative Velocity km per hr</th>\n",
              "      <td>19.197018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Eccentricity</th>\n",
              "      <td>18.326913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in Miles(max)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in M(min)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in Feet(max)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in Feet(min)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in M(max)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in KM(max)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in KM(min)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Est Dia in Miles(min)</th>\n",
              "      <td>13.242435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Epoch Date Close Approach</th>\n",
              "      <td>7.902013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mean Anomaly</th>\n",
              "      <td>5.416363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Epoch Osculation</th>\n",
              "      <td>4.094036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Aphelion Dist</th>\n",
              "      <td>4.080019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Perihelion Time</th>\n",
              "      <td>3.811336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miss Dist.(lunar)</th>\n",
              "      <td>3.240743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miss Dist.(kilometers)</th>\n",
              "      <td>3.240743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miss Dist.(miles)</th>\n",
              "      <td>3.240743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miss Dist.(Astronomical)</th>\n",
              "      <td>3.240742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Asc Node Longitude</th>\n",
              "      <td>1.753648</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mean Motion</th>\n",
              "      <td>1.302780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Orbital Period</th>\n",
              "      <td>1.116815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Semi Major Axis</th>\n",
              "      <td>1.077028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Inclination</th>\n",
              "      <td>0.960687</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Perihelion Arg</th>\n",
              "      <td>0.386521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Jupiter Tisserand Invariant</th>\n",
              "      <td>0.340394</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                              Hazardous\n",
              "Orbit Uncertainity            32.872134\n",
              "Absolute Magnitude            32.552193\n",
              "Minimum Orbit Intersection    28.894902\n",
              "Name                          26.902814\n",
              "Neo Reference ID              26.902814\n",
              "Orbit ID                      24.736904\n",
              "Perihelion Distance           20.702693\n",
              "Relative Velocity km per sec  19.197018\n",
              "Miles per hour                19.197018\n",
              "Relative Velocity km per hr   19.197018\n",
              "Eccentricity                  18.326913\n",
              "Est Dia in Miles(max)         13.242435\n",
              "Est Dia in M(min)             13.242435\n",
              "Est Dia in Feet(max)          13.242435\n",
              "Est Dia in Feet(min)          13.242435\n",
              "Est Dia in M(max)             13.242435\n",
              "Est Dia in KM(max)            13.242435\n",
              "Est Dia in KM(min)            13.242435\n",
              "Est Dia in Miles(min)         13.242435\n",
              "Epoch Date Close Approach      7.902013\n",
              "Mean Anomaly                   5.416363\n",
              "Epoch Osculation               4.094036\n",
              "Aphelion Dist                  4.080019\n",
              "Perihelion Time                3.811336\n",
              "Miss Dist.(lunar)              3.240743\n",
              "Miss Dist.(kilometers)         3.240743\n",
              "Miss Dist.(miles)              3.240743\n",
              "Miss Dist.(Astronomical)       3.240742\n",
              "Asc Node Longitude             1.753648\n",
              "Mean Motion                    1.302780\n",
              "Orbital Period                 1.116815\n",
              "Semi Major Axis                1.077028\n",
              "Inclination                    0.960687\n",
              "Perihelion Arg                 0.386521\n",
              "Jupiter Tisserand Invariant    0.340394"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nasa_corr = df_nasa.drop(['Close Approach Date','Orbiting Body','Orbit Determination Date','Equinox'],axis=1).corr()[[\"Hazardous\"]]*100 # lo pasamos a porcentajes\n",
        "df_nasa_corr = df_nasa_corr.drop(\"Hazardous\", axis=0) # eliminamos la variable target\n",
        "df_nasa_corr = abs(df_nasa_corr) # nos interesa el valor absouluto\n",
        "df_nasa_corr = df_nasa_corr.sort_values([\"Hazardous\"], ascending=False) # ordenamos en forma descendente\n",
        "df_nasa_corr"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RmZa5mOdPpku"
      },
      "source": [
        "# Seleccionamos las variables que vamos a utilizar y hacemos el Split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "_eirKez0KsCG"
      },
      "outputs": [],
      "source": [
        "# dropeo ['Orbiting Body','Equinox'] porque en todos los casos es earth y J2000\n",
        "df_nasa.drop(['Orbiting Body','Equinox'],axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wAZQlfUVJjwG",
        "outputId": "0c0e538a-b5b1-4b64-bb39-5324c21399e5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Neo Reference ID', 'Name', 'Absolute Magnitude', 'Est Dia in KM(min)',\n",
              "       'Est Dia in KM(max)', 'Est Dia in M(min)', 'Est Dia in M(max)',\n",
              "       'Est Dia in Miles(min)', 'Est Dia in Miles(max)',\n",
              "       'Est Dia in Feet(min)', 'Est Dia in Feet(max)', 'Close Approach Date',\n",
              "       'Epoch Date Close Approach', 'Relative Velocity km per sec',\n",
              "       'Relative Velocity km per hr', 'Miles per hour',\n",
              "       'Miss Dist.(Astronomical)', 'Miss Dist.(lunar)',\n",
              "       'Miss Dist.(kilometers)', 'Miss Dist.(miles)', 'Orbit ID',\n",
              "       'Orbit Determination Date', 'Orbit Uncertainity',\n",
              "       'Minimum Orbit Intersection', 'Jupiter Tisserand Invariant',\n",
              "       'Epoch Osculation', 'Eccentricity', 'Semi Major Axis', 'Inclination',\n",
              "       'Asc Node Longitude', 'Orbital Period', 'Perihelion Distance',\n",
              "       'Perihelion Arg', 'Aphelion Dist', 'Perihelion Time', 'Mean Anomaly',\n",
              "       'Mean Motion', 'Hazardous'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nasa.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "23lNtoIIPo_D",
        "outputId": "ec0d3490-4354-48ca-b7e5-19ee05451bd5"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Neo Reference ID</th>\n",
              "      <th>Name</th>\n",
              "      <th>Absolute Magnitude</th>\n",
              "      <th>Est Dia in KM(min)</th>\n",
              "      <th>Est Dia in KM(max)</th>\n",
              "      <th>Est Dia in M(min)</th>\n",
              "      <th>Est Dia in M(max)</th>\n",
              "      <th>Est Dia in Miles(min)</th>\n",
              "      <th>Est Dia in Miles(max)</th>\n",
              "      <th>Est Dia in Feet(min)</th>\n",
              "      <th>...</th>\n",
              "      <th>Semi Major Axis</th>\n",
              "      <th>Inclination</th>\n",
              "      <th>Asc Node Longitude</th>\n",
              "      <th>Orbital Period</th>\n",
              "      <th>Perihelion Distance</th>\n",
              "      <th>Perihelion Arg</th>\n",
              "      <th>Aphelion Dist</th>\n",
              "      <th>Perihelion Time</th>\n",
              "      <th>Mean Anomaly</th>\n",
              "      <th>Mean Motion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3703080</td>\n",
              "      <td>3703080</td>\n",
              "      <td>21.6</td>\n",
              "      <td>0.127220</td>\n",
              "      <td>0.284472</td>\n",
              "      <td>127.219879</td>\n",
              "      <td>284.472297</td>\n",
              "      <td>0.079051</td>\n",
              "      <td>0.176763</td>\n",
              "      <td>417.388066</td>\n",
              "      <td>...</td>\n",
              "      <td>1.407011</td>\n",
              "      <td>6.025981</td>\n",
              "      <td>314.373913</td>\n",
              "      <td>609.599786</td>\n",
              "      <td>0.808259</td>\n",
              "      <td>57.257470</td>\n",
              "      <td>2.005764</td>\n",
              "      <td>2.458162e+06</td>\n",
              "      <td>264.837533</td>\n",
              "      <td>0.590551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3723955</td>\n",
              "      <td>3723955</td>\n",
              "      <td>21.3</td>\n",
              "      <td>0.146068</td>\n",
              "      <td>0.326618</td>\n",
              "      <td>146.067964</td>\n",
              "      <td>326.617897</td>\n",
              "      <td>0.090762</td>\n",
              "      <td>0.202951</td>\n",
              "      <td>479.225620</td>\n",
              "      <td>...</td>\n",
              "      <td>1.107776</td>\n",
              "      <td>28.412996</td>\n",
              "      <td>136.717242</td>\n",
              "      <td>425.869294</td>\n",
              "      <td>0.718200</td>\n",
              "      <td>313.091975</td>\n",
              "      <td>1.497352</td>\n",
              "      <td>2.457795e+06</td>\n",
              "      <td>173.741112</td>\n",
              "      <td>0.845330</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2446862</td>\n",
              "      <td>2446862</td>\n",
              "      <td>20.3</td>\n",
              "      <td>0.231502</td>\n",
              "      <td>0.517654</td>\n",
              "      <td>231.502122</td>\n",
              "      <td>517.654482</td>\n",
              "      <td>0.143849</td>\n",
              "      <td>0.321655</td>\n",
              "      <td>759.521423</td>\n",
              "      <td>...</td>\n",
              "      <td>1.458824</td>\n",
              "      <td>4.237961</td>\n",
              "      <td>259.475979</td>\n",
              "      <td>643.580228</td>\n",
              "      <td>0.950791</td>\n",
              "      <td>248.415038</td>\n",
              "      <td>1.966857</td>\n",
              "      <td>2.458120e+06</td>\n",
              "      <td>292.893654</td>\n",
              "      <td>0.559371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3092506</td>\n",
              "      <td>3092506</td>\n",
              "      <td>27.4</td>\n",
              "      <td>0.008801</td>\n",
              "      <td>0.019681</td>\n",
              "      <td>8.801465</td>\n",
              "      <td>19.680675</td>\n",
              "      <td>0.005469</td>\n",
              "      <td>0.012229</td>\n",
              "      <td>28.876199</td>\n",
              "      <td>...</td>\n",
              "      <td>1.255903</td>\n",
              "      <td>7.905894</td>\n",
              "      <td>57.173266</td>\n",
              "      <td>514.082140</td>\n",
              "      <td>0.983902</td>\n",
              "      <td>18.707701</td>\n",
              "      <td>1.527904</td>\n",
              "      <td>2.457902e+06</td>\n",
              "      <td>68.741007</td>\n",
              "      <td>0.700277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3514799</td>\n",
              "      <td>3514799</td>\n",
              "      <td>21.6</td>\n",
              "      <td>0.127220</td>\n",
              "      <td>0.284472</td>\n",
              "      <td>127.219879</td>\n",
              "      <td>284.472297</td>\n",
              "      <td>0.079051</td>\n",
              "      <td>0.176763</td>\n",
              "      <td>417.388066</td>\n",
              "      <td>...</td>\n",
              "      <td>1.225615</td>\n",
              "      <td>16.793382</td>\n",
              "      <td>84.629307</td>\n",
              "      <td>495.597821</td>\n",
              "      <td>0.967687</td>\n",
              "      <td>158.263596</td>\n",
              "      <td>1.483543</td>\n",
              "      <td>2.457814e+06</td>\n",
              "      <td>135.142133</td>\n",
              "      <td>0.726395</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 35 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   Neo Reference ID     Name  Absolute Magnitude  Est Dia in KM(min)  \\\n",
              "0           3703080  3703080                21.6            0.127220   \n",
              "1           3723955  3723955                21.3            0.146068   \n",
              "2           2446862  2446862                20.3            0.231502   \n",
              "3           3092506  3092506                27.4            0.008801   \n",
              "4           3514799  3514799                21.6            0.127220   \n",
              "\n",
              "   Est Dia in KM(max)  Est Dia in M(min)  Est Dia in M(max)  \\\n",
              "0            0.284472         127.219879         284.472297   \n",
              "1            0.326618         146.067964         326.617897   \n",
              "2            0.517654         231.502122         517.654482   \n",
              "3            0.019681           8.801465          19.680675   \n",
              "4            0.284472         127.219879         284.472297   \n",
              "\n",
              "   Est Dia in Miles(min)  Est Dia in Miles(max)  Est Dia in Feet(min)  ...  \\\n",
              "0               0.079051               0.176763            417.388066  ...   \n",
              "1               0.090762               0.202951            479.225620  ...   \n",
              "2               0.143849               0.321655            759.521423  ...   \n",
              "3               0.005469               0.012229             28.876199  ...   \n",
              "4               0.079051               0.176763            417.388066  ...   \n",
              "\n",
              "   Semi Major Axis  Inclination  Asc Node Longitude  Orbital Period  \\\n",
              "0         1.407011     6.025981          314.373913      609.599786   \n",
              "1         1.107776    28.412996          136.717242      425.869294   \n",
              "2         1.458824     4.237961          259.475979      643.580228   \n",
              "3         1.255903     7.905894           57.173266      514.082140   \n",
              "4         1.225615    16.793382           84.629307      495.597821   \n",
              "\n",
              "   Perihelion Distance  Perihelion Arg  Aphelion Dist  Perihelion Time  \\\n",
              "0             0.808259       57.257470       2.005764     2.458162e+06   \n",
              "1             0.718200      313.091975       1.497352     2.457795e+06   \n",
              "2             0.950791      248.415038       1.966857     2.458120e+06   \n",
              "3             0.983902       18.707701       1.527904     2.457902e+06   \n",
              "4             0.967687      158.263596       1.483543     2.457814e+06   \n",
              "\n",
              "   Mean Anomaly  Mean Motion  \n",
              "0    264.837533     0.590551  \n",
              "1    173.741112     0.845330  \n",
              "2    292.893654     0.559371  \n",
              "3     68.741007     0.700277  \n",
              "4    135.142133     0.726395  \n",
              "\n",
              "[5 rows x 35 columns]"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = df_nasa.drop(['Close Approach Date','Orbit Determination Date'],axis=1)\n",
        "X_nasa = df.drop(\"Hazardous\",axis=1)\n",
        "y_nasa = df[\"Hazardous\"]\n",
        "X_nasa.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "drNcxQmpQhsE"
      },
      "outputs": [],
      "source": [
        "# Hacemos el Split 70-30 para train-test\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_nasa, y_nasa, test_size=0.3, stratify = y_nasa, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "1vL8iYzvsgaB",
        "outputId": "4bb150ce-d6f4-4e91-e332-eef0754b9c38"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>MultinomialNB</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.naive_bayes.MultinomialNB.html\">?<span>Documentation for MultinomialNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>MultinomialNB()</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "MultinomialNB()"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Creamos y entrenamos el clasificador bayesiano\n",
        "bayes_multi = MultinomialNB()\n",
        "bayes_multi.fit(X_train, y_train) # entrenamos el clasificador"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gkciBNHhsycS",
        "outputId": "4627cb0e-8d74-4697-89eb-f8e16e9de05c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Exactitud (accuracy) del modelo: 49.96 %\n",
            "----------------------------------------------------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.85      0.49      0.62      1180\n",
            "        True       0.17      0.55      0.26       227\n",
            "\n",
            "    accuracy                           0.50      1407\n",
            "   macro avg       0.51      0.52      0.44      1407\n",
            "weighted avg       0.74      0.50      0.56      1407\n",
            "\n"
          ]
        }
      ],
      "source": [
        "y_pred_nb = bayes_multi.predict(X_test)\n",
        "\n",
        "#Exactitud del modelo\n",
        "print('Exactitud (accuracy) del modelo: {:.2f} %'.format(accuracy_score(y_test, y_pred_nb)*100))\n",
        "print(\"-\"*100)\n",
        "\n",
        "# Reporte del clasificador\n",
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test,y_pred_nb))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "iVlR-skluk1n",
        "outputId": "b7214f27-5875-4595-8fbe-5dab597fbd2b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GaussianNB</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.naive_bayes.GaussianNB.html\">?<span>Documentation for GaussianNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GaussianNB()</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "GaussianNB()"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Importamos otra librería para modelos naive bayes gausianos\n",
        "from sklearn.naive_bayes import GaussianNB # naive bayes multinomial para clasificación\n",
        "\n",
        "bayes_gauss = GaussianNB()\n",
        "bayes_gauss.fit(X_train, y_train) # entrenamos el clasificador"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AmXgIevpupGY",
        "outputId": "2c727c95-fd58-4ac3-f49a-86ea53f9023c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Exactitud (accuracy) del modelo: 83.87 %\n",
            "----------------------------------------------------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.84      1.00      0.91      1180\n",
            "        True       0.00      0.00      0.00       227\n",
            "\n",
            "    accuracy                           0.84      1407\n",
            "   macro avg       0.42      0.50      0.46      1407\n",
            "weighted avg       0.70      0.84      0.77      1407\n",
            "\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Lenovo\\AppData\\Roaming\\Python\\Python313\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "C:\\Users\\Lenovo\\AppData\\Roaming\\Python\\Python313\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "C:\\Users\\Lenovo\\AppData\\Roaming\\Python\\Python313\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "# Calculamos y mostramos la matriz de confusión del modelo\n",
        "y_pred_gauss = bayes_gauss.predict(X_test)\n",
        "#Exactitud del modelo\n",
        "print('Exactitud (accuracy) del modelo: {:.2f} %'.format(accuracy_score(y_test, y_pred_gauss)*100))\n",
        "print(\"-\"*100)\n",
        "\n",
        "print(classification_report(y_test,y_pred_gauss))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fVOQIHqXmAj8"
      },
      "source": [
        "# Ejercicio\n",
        "\n",
        "- Identificar el parametro que estratifica el split del experimento\n",
        "- ¿Cómo se compara el performance del modelo de bayes multinomial con el de bayes gaussiano? Basado en las métricas, ¿Cúal de los modelos es más útil?\n",
        "- Remover las variables redundantes/altamente codependientes como 'Est Dia in M(min)' y 'Est Dia in Miles(min)'\n",
        "- ¿Que pasa con el accuracy en este ejercicio? ¿es el mejor indicador posible?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Respuestas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Punto 1\n",
        "Identificar el parametro que estratifica el split del experimento"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X_nasa, y_nasa, test_size=0.3, stratify = y_nasa, random_state=0)\n",
        "\n",
        "Se puede ver en esta linea que el parametro que estratifica el split en y_nasa, que es la variable target.\n",
        "\n",
        "El strategy asegura que los diferentes grupos o clases de un conjunto de datos estén representados proporcionalmente tanto en el conjunto de entrenamiento como en el de prueba."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Punto 2\n",
        "¿Cómo se compara el performance del modelo de bayes multinomial con el de bayes gaussiano? Basado en las métricas, ¿Cúal de los modelos es más útil?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "El de bayes multinomial tiene las siguientes metricas:\n",
        "* Accuracy  49.96\n",
        "* Precision 0.85 \n",
        "* Recall    0.49\n",
        "\n",
        "\n",
        "El de bayes gaussiano tiene las siguientes metricas:\n",
        "* Accuracy  83.87\n",
        "* Precision 0.84 \n",
        "* Recall    1.00\n",
        "\n",
        "Conviene utilizar el bayes gaussiano ya que el accuracy es mas alto debido a que hay datos numéricos continuos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Punto 3\n",
        "Remover las variables redundantes/altamente codependientes como 'Est Dia in M(min)' y 'Est Dia in Miles(min)'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Variables eliminadas por multicolinealidad\n",
            "\n",
            "* Est Dia in Feet(max)\n",
            "* Perihelion Time\n",
            "* Perihelion Arg\n",
            "* Est Dia in KM(max)\n",
            "* Mean Anomaly\n",
            "* Est Dia in Miles(min)\n",
            "* Miss Dist.(kilometers)\n",
            "* Perihelion Distance\n",
            "* Est Dia in Miles(max)\n",
            "* Est Dia in M(min)\n",
            "* Mean Motion\n",
            "* Semi Major Axis\n",
            "* Relative Velocity km per hr\n",
            "* Miss Dist.(Astronomical)\n",
            "* Miss Dist.(miles)\n",
            "* Neo Reference ID\n",
            "* Asc Node Longitude\n",
            "* Orbital Period\n",
            "* Eccentricity\n",
            "* Aphelion Dist\n",
            "* Miles per hour\n",
            "* Est Dia in M(max)\n",
            "* Est Dia in KM(min)\n",
            "* Est Dia in Feet(min)\n",
            "* Inclination\n"
          ]
        }
      ],
      "source": [
        "TARGET = 'Hazardous'\n",
        "\n",
        "# Filtrar multicolinealidad entre las top variables\n",
        "def eliminar_multicolinealidad(variables_ordenadas, matriz_de_correlacion, correlacion_target, umbral=0.8, cantidad_de_variables=10):\n",
        "    variables_seleccionadas = []\n",
        "    i = 0\n",
        "    while len(variables_seleccionadas) < cantidad_de_variables and i < len(variables_ordenadas):\n",
        "        variable_actual = variables_ordenadas[i]\n",
        "        es_colineal = False\n",
        "        for variable_seleccionada in variables_seleccionadas:\n",
        "            if abs(matriz_de_correlacion.loc[variable_actual, variable_seleccionada]) > umbral:\n",
        "                # Si hay colinealidad, nos quedamos con la más correlacionada con 'Hazardous'\n",
        "                if abs(correlacion_target[variable_actual]) < abs(correlacion_target[variable_seleccionada]):\n",
        "                    es_colineal = True\n",
        "                    break\n",
        "                else:\n",
        "                    variables_seleccionadas.remove(variable_seleccionada)\n",
        "                    break\n",
        "        if not es_colineal:\n",
        "            variables_seleccionadas.append(variable_actual)\n",
        "        i += 1\n",
        "    return variables_seleccionadas\n",
        "\n",
        "# Definimos las variables (Solo variables numericas)\n",
        "variables_ordenadas = list(df.select_dtypes(include='number').columns)\n",
        "\n",
        "# Correlación con la variable objetivo\n",
        "correlacion_target = df.corr(numeric_only=True)[TARGET]  \n",
        "\n",
        "# Creamos la matriz de correlación\n",
        "matriz_de_correlacion = df[variables_ordenadas].corr()\n",
        "\n",
        "# Aplicamos la función de selección\n",
        "variables_seleccionadas = eliminar_multicolinealidad(variables_ordenadas, matriz_de_correlacion, correlacion_target, umbral = 0.7, cantidad_de_variables = 10)\n",
        "\n",
        "# Variables eliminadas\n",
        "variables_eliminadas = list(set(variables_ordenadas) - set(variables_seleccionadas))\n",
        "print(\"Variables eliminadas por multicolinealidad\\n\")\n",
        "for(i, variable) in enumerate(variables_eliminadas):\n",
        "    print(f\"* {variable}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Actualizamos el DataFrame y lo mostramos con variables seleccionadas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "      Name  Absolute Magnitude  Epoch Date Close Approach  \\\n",
            "0  3703080                21.6               788947200000   \n",
            "1  3723955                21.3               788947200000   \n",
            "2  2446862                20.3               789552000000   \n",
            "3  3092506                27.4               790156800000   \n",
            "4  3514799                21.6               790156800000   \n",
            "\n",
            "   Relative Velocity km per sec  Miss Dist.(lunar)  Orbit ID  \\\n",
            "0                      6.115834         163.178711        17   \n",
            "1                     18.113985         148.992630        21   \n",
            "2                      7.590711          19.821890        22   \n",
            "3                     11.173874         110.990387         7   \n",
            "4                      9.840831         158.646713        25   \n",
            "\n",
            "   Orbit Uncertainity  Minimum Orbit Intersection  \\\n",
            "0                   5                    0.025282   \n",
            "1                   3                    0.186935   \n",
            "2                   0                    0.043058   \n",
            "3                   6                    0.005512   \n",
            "4                   1                    0.034798   \n",
            "\n",
            "   Jupiter Tisserand Invariant  Epoch Osculation  Hazardous  \n",
            "0                        4.634         2458000.5       True  \n",
            "1                        5.457         2458000.5      False  \n",
            "2                        4.557         2458000.5       True  \n",
            "3                        5.093         2458000.5      False  \n",
            "4                        5.154         2458000.5       True  \n"
          ]
        }
      ],
      "source": [
        "df_filtrado = df[variables_seleccionadas + [TARGET]]\n",
        "print(df_filtrado.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Absolute Magnitude</th>\n",
              "      <th>Epoch Date Close Approach</th>\n",
              "      <th>Relative Velocity km per sec</th>\n",
              "      <th>Miss Dist.(lunar)</th>\n",
              "      <th>Orbit ID</th>\n",
              "      <th>Orbit Uncertainity</th>\n",
              "      <th>Minimum Orbit Intersection</th>\n",
              "      <th>Jupiter Tisserand Invariant</th>\n",
              "      <th>Epoch Osculation</th>\n",
              "      <th>Hazardous</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3703080</td>\n",
              "      <td>21.600</td>\n",
              "      <td>788947200000</td>\n",
              "      <td>6.115834</td>\n",
              "      <td>163.178711</td>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>0.025282</td>\n",
              "      <td>4.634</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3723955</td>\n",
              "      <td>21.300</td>\n",
              "      <td>788947200000</td>\n",
              "      <td>18.113985</td>\n",
              "      <td>148.992630</td>\n",
              "      <td>21</td>\n",
              "      <td>3</td>\n",
              "      <td>0.186935</td>\n",
              "      <td>5.457</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2446862</td>\n",
              "      <td>20.300</td>\n",
              "      <td>789552000000</td>\n",
              "      <td>7.590711</td>\n",
              "      <td>19.821890</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0.043058</td>\n",
              "      <td>4.557</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3092506</td>\n",
              "      <td>27.400</td>\n",
              "      <td>790156800000</td>\n",
              "      <td>11.173874</td>\n",
              "      <td>110.990387</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>0.005512</td>\n",
              "      <td>5.093</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3514799</td>\n",
              "      <td>21.600</td>\n",
              "      <td>790156800000</td>\n",
              "      <td>9.840831</td>\n",
              "      <td>158.646713</td>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>0.034798</td>\n",
              "      <td>5.154</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4682</th>\n",
              "      <td>3759007</td>\n",
              "      <td>23.900</td>\n",
              "      <td>1473318000000</td>\n",
              "      <td>22.154265</td>\n",
              "      <td>16.089413</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>0.019777</td>\n",
              "      <td>5.156</td>\n",
              "      <td>2457637.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4683</th>\n",
              "      <td>3759295</td>\n",
              "      <td>28.200</td>\n",
              "      <td>1473318000000</td>\n",
              "      <td>3.225150</td>\n",
              "      <td>2.516399</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>0.006451</td>\n",
              "      <td>5.742</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4684</th>\n",
              "      <td>3759714</td>\n",
              "      <td>22.700</td>\n",
              "      <td>1473318000000</td>\n",
              "      <td>7.191642</td>\n",
              "      <td>23.732393</td>\n",
              "      <td>17</td>\n",
              "      <td>6</td>\n",
              "      <td>0.059972</td>\n",
              "      <td>4.410</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4685</th>\n",
              "      <td>3759720</td>\n",
              "      <td>21.800</td>\n",
              "      <td>1473318000000</td>\n",
              "      <td>11.352090</td>\n",
              "      <td>101.435493</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>0.177510</td>\n",
              "      <td>4.477</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4686</th>\n",
              "      <td>3772978</td>\n",
              "      <td>19.109</td>\n",
              "      <td>1473318000000</td>\n",
              "      <td>35.946852</td>\n",
              "      <td>179.862671</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>0.051777</td>\n",
              "      <td>4.108</td>\n",
              "      <td>2458000.5</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4687 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         Name  Absolute Magnitude  Epoch Date Close Approach  \\\n",
              "0     3703080              21.600               788947200000   \n",
              "1     3723955              21.300               788947200000   \n",
              "2     2446862              20.300               789552000000   \n",
              "3     3092506              27.400               790156800000   \n",
              "4     3514799              21.600               790156800000   \n",
              "...       ...                 ...                        ...   \n",
              "4682  3759007              23.900              1473318000000   \n",
              "4683  3759295              28.200              1473318000000   \n",
              "4684  3759714              22.700              1473318000000   \n",
              "4685  3759720              21.800              1473318000000   \n",
              "4686  3772978              19.109              1473318000000   \n",
              "\n",
              "      Relative Velocity km per sec  Miss Dist.(lunar)  Orbit ID  \\\n",
              "0                         6.115834         163.178711        17   \n",
              "1                        18.113985         148.992630        21   \n",
              "2                         7.590711          19.821890        22   \n",
              "3                        11.173874         110.990387         7   \n",
              "4                         9.840831         158.646713        25   \n",
              "...                            ...                ...       ...   \n",
              "4682                     22.154265          16.089413         4   \n",
              "4683                      3.225150           2.516399         2   \n",
              "4684                      7.191642          23.732393        17   \n",
              "4685                     11.352090         101.435493         6   \n",
              "4686                     35.946852         179.862671        13   \n",
              "\n",
              "      Orbit Uncertainity  Minimum Orbit Intersection  \\\n",
              "0                      5                    0.025282   \n",
              "1                      3                    0.186935   \n",
              "2                      0                    0.043058   \n",
              "3                      6                    0.005512   \n",
              "4                      1                    0.034798   \n",
              "...                  ...                         ...   \n",
              "4682                   8                    0.019777   \n",
              "4683                   6                    0.006451   \n",
              "4684                   6                    0.059972   \n",
              "4685                   5                    0.177510   \n",
              "4686                   6                    0.051777   \n",
              "\n",
              "      Jupiter Tisserand Invariant  Epoch Osculation  Hazardous  \n",
              "0                           4.634         2458000.5       True  \n",
              "1                           5.457         2458000.5      False  \n",
              "2                           4.557         2458000.5       True  \n",
              "3                           5.093         2458000.5      False  \n",
              "4                           5.154         2458000.5       True  \n",
              "...                           ...               ...        ...  \n",
              "4682                        5.156         2457637.5      False  \n",
              "4683                        5.742         2458000.5      False  \n",
              "4684                        4.410         2458000.5      False  \n",
              "4685                        4.477         2458000.5      False  \n",
              "4686                        4.108         2458000.5      False  \n",
              "\n",
              "[4687 rows x 11 columns]"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_filtrado"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Exactitud (accuracy) del modelo: 83.87%\n",
            "----------------------------------------------------------------------------------------------------\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.84      1.00      0.91      1180\n",
            "        True       0.00      0.00      0.00       227\n",
            "\n",
            "    accuracy                           0.84      1407\n",
            "   macro avg       0.42      0.50      0.46      1407\n",
            "weighted avg       0.70      0.84      0.77      1407\n",
            "\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Lenovo\\AppData\\Roaming\\Python\\Python313\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "C:\\Users\\Lenovo\\AppData\\Roaming\\Python\\Python313\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "C:\\Users\\Lenovo\\AppData\\Roaming\\Python\\Python313\\site-packages\\sklearn\\metrics\\_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "x_nasa_filtrado = df_filtrado.drop(TARGET, axis = 1)\n",
        "y_nasa_filtrado = df_filtrado[TARGET]\n",
        "x_nasa_filtrado.head()\n",
        "\n",
        "X_train_filtrado, X_test_filtrado, y_train_filtrado, y_test_filtrado = train_test_split(x_nasa_filtrado, y_nasa_filtrado, test_size = 0.3, stratify = y_nasa_filtrado, random_state=0)\n",
        "\n",
        "bayes_gauss = GaussianNB()\n",
        "bayes_gauss.fit(X_train_filtrado, y_train_filtrado)\n",
        "\n",
        "y_pred_gauss = bayes_gauss.predict(X_test)\n",
        "print('Exactitud (accuracy) del modelo: {:.2f}%'.format(accuracy_score(y_test_filtrado, y_pred_gauss) * 100))\n",
        "print(\"-\" * 100)\n",
        "\n",
        "print(classification_report(y_test_filtrado, y_pred_gauss))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Punto 4\n",
        "¿Que pasa con el accuracy en este ejercicio? ¿Es el mejor indicador posible?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Teniendo en cuenta que lo que se busca clasificar es si el asteroide es peligroso, la mejor metrica para optimizar son los falsos negativos (predecir que no era peligroso cuando en realidad lo era), es decir, la mejor metrica para evaluar el modelo es el recall."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
